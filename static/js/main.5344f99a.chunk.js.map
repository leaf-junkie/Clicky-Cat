{"version":3,"sources":["components/Jumbotron/index.js","components/Footer/index.js","components/Cat/index.js","components/Grid/Col.js","components/Grid/Container.js","components/Grid/Row.js","components/Score/index.js","components/GameLogic/GameLogic.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","react_default","a","createElement","className","Footer","Cat","this","id","props","src","image","alt","onClick","clickCat","React","Component","Col","_ref","children","Container","Row","fluid","concat","Score","event","setState","name","console","log","onChange","handleChange","bind","style","display","position","left","score","highScore","GameLogic","state","cats","selected","win","alert","_this","resetGame","lose","shuffle","arr","i","length","j","Math","floor","random","target","includes","push","_this2","components_Score","Container_Container","Row_Row","Col_Col","map","kitty","index","components_Cat","key","App","components_Jumbotron","components_GameLogic_GameLogic","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5344f99a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport style from \"./style.css\";\r\n\r\nconst Jumbotron = () => {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n            <h1>Clicky Cat</h1>\r\n            <p className=\"lead\">Pet each kitty one time and one time only!</p>\r\n            <p>The game ends when you click any image more than once.</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\nimport style from \"./style.css\"\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className=\"navbar navbar-light bg-light text-secondary text-center\">\r\n            <p>Julie Ragsdale | 2019</p>\r\n        </footer>\r\n    );\r\n} \r\n\r\nexport default Footer;","import React from \"react\";\r\nimport style from \"./style.css\"\r\n\r\nclass Cat extends React.Component {\r\n    componentDidMount() {\r\n        this.id = this.props.id\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"cat\">\r\n                <img\r\n                    id={this.props.id}\r\n                    src={this.props.image} \r\n                    className=\"clicked\" \r\n                    alt=\"cat\"\r\n                    onClick={this.props.clickCat}\r\n                >\r\n                </img>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Cat;","import React from \"react\";\r\n\r\nexport const Col = ({ children }) => (\r\n    <div className=\"col-md\">\r\n        {children}\r\n    </div>\r\n);","import React from \"react\";\r\n\r\nexport const Container = ({ children }) => {\r\n    return (\r\n        <div className=\"container\">\r\n            {children}\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\n\r\nexport const Row = ({ fluid, children }) => (\r\n    <div className={`row${fluid ? \"-fluid\" : \"\"}`}>\r\n        {children}\r\n    </div>\r\n);","import React from \"react\";\r\n\r\nclass Score extends React.Component {\r\n   \r\n    handleChange(event) {\r\n        this.setState({ name: event.name });\r\n        console.log(event);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <span \r\n                    name=\"score\"\r\n                    onChange={this.handleChange.bind(this)}\r\n                    style={{\r\n                        display: \"block\",\r\n                        position: \"relative\",\r\n                        left: \"1em\"\r\n                    }}\r\n                >Score: {this.props.score}\r\n                </span>\r\n                <span \r\n                    name=\"highScore\"\r\n                    onChange={this.handleChange.bind(this)} \r\n                    style={{\r\n                        display: \"block\",\r\n                        position: \"relative\",\r\n                        left: \"1em\"\r\n                    }}\r\n                >High Score: {this.props.highScore}\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Score;","import React from \"react\";\r\nimport Cat from \"../Cat\";\r\nimport cats from \"../../../src/cats.json\";\r\nimport { Container, Col, Row } from \"../Grid\";\r\nimport Score from \"../Score\";\r\n\r\nclass GameLogic extends React.Component {\r\n    state = {\r\n      score: 0,  \r\n      highScore: 0,\r\n      cats: cats,\r\n      selected: []\r\n    }  \r\n\r\n    componentWillMount() {\r\n        this.shuffle();\r\n    }\r\n\r\n    resetGame() {\r\n        this.setState({\r\n            score: 0,\r\n            selected: []\r\n        });\r\n        this.shuffle();\r\n    }\r\n\r\n    win = () => {\r\n        alert(\"W I N N E R\");\r\n        this.resetGame();\r\n    }\r\n\r\n    lose = () => {\r\n        alert(\"G A M E   O V E R\");\r\n        this.resetGame();\r\n    }\r\n\r\n    // Shuffle cats when an image is clicked\r\n    shuffle = () => {\r\n        let arr = this.state.cats;\r\n        for (let i = arr.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [arr[i], arr[j]] = [arr[j], arr[i]];\r\n        }\r\n        this.setState({\r\n            cats: arr\r\n        });\r\n    }\r\n\r\n    // Check if image has been clicked\r\n    clickCat = (event) => {\r\n        console.log(this.state.selected.length);\r\n        let id = event.target.id;\r\n        if(this.state.selected.includes(id)) {\r\n            this.lose();\r\n        } else {\r\n            this.state.selected.push(id);\r\n            let score = this.state.score + 1;\r\n            let highScore = score > this.state.highScore ? score : this.state.highScore;\r\n            this.setState({ \r\n                score, \r\n                highScore\r\n            });\r\n            if (this.state.selected.length === 16) {\r\n                this.win();\r\n            }\r\n            this.shuffle();\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Score\r\n                    score={this.state.score}\r\n                    highScore={this.state.highScore}\r\n                />\r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col>\r\n                            {this.state.cats.map((kitty, index) => {\r\n                                return(\r\n                                <Cat\r\n                                    clickCat={this.clickCat.bind(this)}\r\n                                    id={kitty.id}\r\n                                    key={kitty.id}\r\n                                    image={kitty.image}\r\n                                    selected={kitty.selected}\r\n                                />\r\n                            )})}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameLogic;","import React from \"react\";\n// import Score from \"./components/Score/index\";\nimport Jumbotron from \"./components/Jumbotron/index\";\n// import { Container } from \"./components/Grid\";\nimport Footer from \"./components/Footer/index\";\nimport GameLogic from \"./components/GameLogic/GameLogic\"\n\nclass App extends React.Component {\n  render() {\n    return(\n      <div>\n        <Jumbotron/>\n        <GameLogic/>\n        <Footer/>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}